{
    "sourceFile": "save.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1670510446657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1670510446657,
            "name": "Commit-0",
            "content": "class Cardinal():\r\n\r\n    Sud = \"Sud\"\r\n    Ouest = \"Ouest\"\r\n    Est = \"Est\"\r\n    Nord = \"Nord\"\r\n\r\n    def __init__(self, value):\r\n        self._value = value\r\n\r\n    def __eq__(self, otherCardinal):\r\n        return self._value == otherCardinal._value\r\n\r\nclass Orientation():\r\n\r\n    def __init__(self, cardinal:Cardinal):\r\n        self._cardinal = cardinal\r\n\r\n    #besoin d'explication pour cette methode\r\n    def __eq__(self, otherOrientation):\r\n        return self._cardinal == otherOrientation._cardinal\r\n\r\n    def tourne_droite(self):\r\n        if self._cardinal == Cardinal(\"Sud\"): return Cardinal(\"Ouest\")\r\n        if self._cardinal == Cardinal(\"Ouest\"): return Cardinal(\"Nord\")\r\n        if self._cardinal == Cardinal(\"Nord\"): return Cardinal(\"Est\")\r\n        if self._cardinal == Cardinal(\"Est\"): return Cardinal(\"Sud\")\r\n\r\n    def tourne_gauche(self):\r\n        if self._cardinal == Cardinal(\"Sud\"): return Cardinal(\"Est\")\r\n        if self._cardinal == Cardinal(\"Est\"): return Cardinal(\"Nord\")\r\n        if self._cardinal == Cardinal(\"Nord\"): return Cardinal(\"Ouest\")\r\n        if self._cardinal == Cardinal(\"Ouest\"): return Cardinal(\"Sud\")\r\n\r\nclass Position():\r\n    \r\n    def __init__(self, point_y, point_x, cardinal: Cardinal):\r\n        self._cardinal = cardinal\r\n        self.axe_y = point_y\r\n        self.axe_x = point_x\r\n        #\"_position\" informe la poisition actuel du rover\r\n        self._position = self.axe_y, self.axe_x, self._cardinal\r\n    \r\n    def avance(self):\r\n\r\n        #avancement enfonction de la direction\r\n        if self._cardinal == \"Sud\":     self.axe_y += -1\r\n        if self._cardinal == \"Nord\":    self.axe_y += 1\r\n        if self._cardinal == \"Est\":     self.axe_x += 1\r\n        if self._cardinal == \"Ouest\":   self.axe_x += -1\r\n\r\n        #verification qu'il soit toujours sur la map\r\n        if self.axe_x > 10: self.axe_x == 10\r\n        if self.axe_x < 0:  self.axe_x == 0\r\n        if self.axe_y > 10: self.axe_y == 0\r\n        if self.axe_y < 0:  self.axe_y == 10\r\n\r\n        #position actuel du rover, stocker Ã  l'interieur de \"_position\"\r\n        self._position == self.axe_x, self.axe_y, self._cardinal\r\n\r\nclass Deplacement():\r\n    \r\n\r\n\r\nclass Rover():\r\n\r\n    def __init__(self, position: Position):\r\n        self._position = position\r\n\r\n    def avance(self):\r\n        self._position.avance()\r\n\r\nclass Rover(Position):\r\n\r\n    def __init__(self):\r\n        self._cardinal = \"Nord\"\r\n        self.axe_y = 5\r\n        self.axe_x = 5\r\n\r\n    def avance(self):\r\n        self._position.avance()\r\n\r\n    def tourne_droite(self):\r\n        self._position.\r\n\r\n###########   test   ############\r\nrover = Rover()\r\n\r\nrover.position()\r\n\r\nrover.avance()\r\n\r\nrover.position()"
        }
    ]
}