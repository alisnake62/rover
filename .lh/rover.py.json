{
    "sourceFile": "rover.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1670486562130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1670486583248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         self._position.avance()\r\n \r\n \r\n ##########   tests   ###########\r\n-rover = Rover(\"Nord\",(5,5))\r\n+rover = Rover(Nord,(5,5))\r\n print(rover._orientation, rover._position)\r\n rover.avance\r\n rover.tournedroite\r\n print(rover._orientation, rover._position)\r\n"
                },
                {
                    "date": 1670486615792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         if self._cardinal == Cardinal(\"Ouest\"): return Cardinal(\"Sud\")\r\n \r\n class Position():\r\n     \r\n-    def __init__(self, y, x):\r\n+    def __init__(self, yx):\r\n         self.axe_y = y\r\n         self.axe_x = x\r\n         self._position = self.axe_y, self.axe_x\r\n         \r\n@@ -73,9 +73,9 @@\n         self._position.avance()\r\n \r\n \r\n ##########   tests   ###########\r\n-rover = Rover(Nord,(5,5))\r\n+rover = Rover(\"Nord\",(5,5))\r\n print(rover._orientation, rover._position)\r\n rover.avance\r\n rover.tournedroite\r\n print(rover._orientation, rover._position)\r\n"
                },
                {
                    "date": 1670486737359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \r\n class Position():\r\n     \r\n     def __init__(self, yx):\r\n-        self.axe_y = y\r\n+        self.axe_yx = y\r\n         self.axe_x = x\r\n         self._position = self.axe_y, self.axe_x\r\n         \r\n     def __eq__(self, otherPosition):\r\n"
                },
                {
                    "date": 1670486761377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \r\n class Position():\r\n     \r\n     def __init__(self, yx):\r\n-        self.axe_yx = y\r\n+        self.axe_yx = yx\r\n         self.axe_x = x\r\n         self._position = self.axe_y, self.axe_x\r\n         \r\n     def __eq__(self, otherPosition):\r\n"
                },
                {
                    "date": 1670486772460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \r\n class Position():\r\n     \r\n     def __init__(self, yx):\r\n-        self.axe_yx = yx\r\n+        self.axe_yx = yx \r\n         self.axe_x = x\r\n         self._position = self.axe_y, self.axe_x\r\n         \r\n     def __eq__(self, otherPosition):\r\n"
                },
                {
                    "date": 1670487131797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \r\n class Position():\r\n     \r\n     def __init__(self, yx):\r\n-        self.axe_yx = yx \r\n+        self.axe_yx = yx\r\n         self.axe_x = x\r\n         self._position = self.axe_y, self.axe_x\r\n         \r\n     def __eq__(self, otherPosition):\r\n"
                },
                {
                    "date": 1670487151280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n class Position():\r\n     \r\n     def __init__(self, yx):\r\n         self.axe_yx = yx\r\n-        self.axe_x = x\r\n+        axe_yx\r\n         self._position = self.axe_y, self.axe_x\r\n         \r\n     def __eq__(self, otherPosition):\r\n         return self._position == otherPosition._position\r\n"
                },
                {
                    "date": 1670487159345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n class Position():\r\n     \r\n     def __init__(self, yx):\r\n         self.axe_yx = yx\r\n-        axe_yx\r\n+        \r\n         self._position = self.axe_y, self.axe_x\r\n         \r\n     def __eq__(self, otherPosition):\r\n         return self._position == otherPosition._position\r\n"
                },
                {
                    "date": 1670487168346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     def __eq__(self, otherPosition):\r\n         return self._position == otherPosition._position\r\n     \r\n     def avance(self):\r\n-        if self._cardinal == Cardinal(\"Sud\"): return self.axe_y == self.axe_y - 1\r\n+        if self._cardinal == Cardinal(\"Sud\"): return y == self.axe_y - 1\r\n         if self._cardinal == Cardinal(\"Nord\"): return self.axe_y == self.axe_y + 1\r\n         if self._cardinal == Cardinal(\"Est\"): return self.axe_x == self.axe_x + 1\r\n         if self._cardinal == Cardinal(\"Ouest\"): return self.axe_x == self.axe_x - 1\r\n         if self.axe_x > 10: return self.axe_x == 10\r\n"
                },
                {
                    "date": 1670487212128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,18 +33,18 @@\n         if self._cardinal == Cardinal(\"Ouest\"): return Cardinal(\"Sud\")\r\n \r\n class Position():\r\n     \r\n-    def __init__(self, yx):\r\n-        self.axe_yx = yx\r\n-        \r\n+    def __init__(self, y,x):\r\n+        self.axe_y = y\r\n+        self.axe_x = x\r\n         self._position = self.axe_y, self.axe_x\r\n         \r\n     def __eq__(self, otherPosition):\r\n         return self._position == otherPosition._position\r\n     \r\n     def avance(self):\r\n-        if self._cardinal == Cardinal(\"Sud\"): return y == self.axe_y - 1\r\n+        if self._cardinal == Cardinal(\"Sud\"): return self.axe_y == self.axe_y - 1\r\n         if self._cardinal == Cardinal(\"Nord\"): return self.axe_y == self.axe_y + 1\r\n         if self._cardinal == Cardinal(\"Est\"): return self.axe_x == self.axe_x + 1\r\n         if self._cardinal == Cardinal(\"Ouest\"): return self.axe_x == self.axe_x - 1\r\n         if self.axe_x > 10: return self.axe_x == 10\r\n"
                },
                {
                    "date": 1670512092792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,72 +10,87 @@\n \r\n     def __eq__(self, otherCardinal):\r\n         return self._value == otherCardinal._value\r\n \r\n-class Orientation():\r\n+# class Orientation():\r\n \r\n-    def __init__(self, cardinal:Cardinal):\r\n+#     def __init__(self, cardinal:Cardinal):\r\n+#         self._cardinal = cardinal\r\n+\r\n+#     #besoin d'explication pour cette methode\r\n+#     def __eq__(self, otherOrientation):\r\n+#         return self._cardinal == otherOrientation._cardinal\r\n+\r\n+#     def tourne_droite(self):\r\n+#         if self._cardinal == Cardinal(\"Nord\"): return Cardinal(\"Est\")\r\n+        \r\n+\r\n+class Position():\r\n+    \r\n+    def __init__(self, point_y, point_x, cardinal: Cardinal):\r\n         self._cardinal = cardinal\r\n+        self.axe_y = point_y\r\n+        self.axe_x = point_x\r\n \r\n-    #besoin d'explication pour cette methode\r\n-    def __eq__(self, otherOrientation):\r\n-        return self._cardinal == otherOrientation._cardinal\r\n+    def position(self):\r\n+        print(self.axe_y, self.axe_x, self._cardinal)\r\n \r\n+class Deplacement(Position):\r\n+\r\n+    def avance(self):\r\n+        #avancement enfonction de la direction\r\n+        if self._cardinal == \"Sud\":     self.axe_y += -1\r\n+        if self._cardinal == \"Nord\":    self.axe_y += 1\r\n+        if self._cardinal == \"Est\":     self.axe_x += 1\r\n+        if self._cardinal == \"Ouest\":   self.axe_x += -1\r\n+\r\n+        #verification qu'il soit toujours sur la map\r\n+        if self.axe_x > 10: self.axe_x == 10\r\n+        if self.axe_x < 0:  self.axe_x == 0\r\n+        if self.axe_y > 10: self.axe_y == 0\r\n+        if self.axe_y < 0:  self.axe_y == 10\r\n+\r\n+    def recule(self):\r\n+        #avancement enfonction de la direction\r\n+        if self._cardinal == \"Sud\":     self.axe_y += 1\r\n+        if self._cardinal == \"Nord\":    self.axe_y += -1\r\n+        if self._cardinal == \"Est\":     self.axe_x += -1\r\n+        if self._cardinal == \"Ouest\":   self.axe_x += 1\r\n+\r\n+        #verification qu'il soit toujours sur la map\r\n+        if self.axe_x > 10: self.axe_x == 10\r\n+        if self.axe_x < 0:  self.axe_x == 0\r\n+        if self.axe_y > 10: self.axe_y == 0\r\n+        if self.axe_y < 0:  self.axe_y == 10\r\n+\r\n     def tourne_droite(self):\r\n-        if self._cardinal == Cardinal(\"Sud\"): return Cardinal(\"Ouest\")\r\n-        if self._cardinal == Cardinal(\"Ouest\"): return Cardinal(\"Nord\")\r\n-        if self._cardinal == Cardinal(\"Nord\"): return Cardinal(\"Est\")\r\n-        if self._cardinal == Cardinal(\"Est\"): return Cardinal(\"Sud\")\r\n+        if self._cardinal == \"Sud\":     self._cardinal == \"Ouest\"\r\n+        if self._cardinal == \"Ouest\":   self._cardinal == \"Nord\"\r\n+        if self._cardinal == \"Nord\":    self._cardinal == \"Est\"\r\n+        if self._cardinal == \"Est\":     self._cardinal == \"Sud\"\r\n \r\n     def tourne_gauche(self):\r\n-        if self._cardinal == Cardinal(\"Sud\"): return Cardinal(\"Est\")\r\n-        if self._cardinal == Cardinal(\"Est\"): return Cardinal(\"Nord\")\r\n-        if self._cardinal == Cardinal(\"Nord\"): return Cardinal(\"Ouest\")\r\n-        if self._cardinal == Cardinal(\"Ouest\"): return Cardinal(\"Sud\")\r\n+        if self._cardinal == \"Sud\":     self._cardinal == \"Est\"\r\n+        if self._cardinal == \"Est\":     self._cardinal == \"Nord\"\r\n+        if self._cardinal == \"Nord\":    self._cardinal == \"Ouest\"\r\n+        if self._cardinal == \"Ouest\":   self._cardinal == \"Sud\"\r\n \r\n-class Position():\r\n-    \r\n-    def __init__(self, y,x):\r\n-        self.axe_y = y\r\n-        self.axe_x = x\r\n-        self._position = self.axe_y, self.axe_x\r\n-        \r\n-    def __eq__(self, otherPosition):\r\n-        return self._position == otherPosition._position\r\n-    \r\n-    def avance(self):\r\n-        if self._cardinal == Cardinal(\"Sud\"): return self.axe_y == self.axe_y - 1\r\n-        if self._cardinal == Cardinal(\"Nord\"): return self.axe_y == self.axe_y + 1\r\n-        if self._cardinal == Cardinal(\"Est\"): return self.axe_x == self.axe_x + 1\r\n-        if self._cardinal == Cardinal(\"Ouest\"): return self.axe_x == self.axe_x - 1\r\n-        if self.axe_x > 10: return self.axe_x == 10\r\n-        if self.axe_x < 0: return self.axe_x == 0\r\n-        if self.axe_y > 10: return self.axe_y == 0\r\n-        if self.axe_y < 0: return self.axe_y == 10\r\n-        self._position == self.axe_x, self.axe_y\r\n \r\n+class Rover(Deplacement):\r\n \r\n-class Rover():\r\n+    def __init__(self):\r\n+        self._cardinal = \"Nord\"\r\n+        self.axe_y = 5\r\n+        self.axe_x = 5\r\n \r\n-    def __init__(self, orientation: Orientation, position: Position):\r\n-        self._orientation = orientation\r\n-        self._position = position\r\n-        \r\n-    def getOrientation(self):\r\n-        return self._orientation\r\n \r\n-    def getPosition(self):\r\n-        return self._position\r\n+###########   test   ############\r\n+rover = Rover()\r\n \r\n-    def tournedroite(self):\r\n-        self._orientation.tourne_droite()\r\n+rover.position()\r\n \r\n-    def avance(self):\r\n-        self._position.avance()\r\n+rover.tourne_droite()\r\n \r\n+rover.position()\r\n \r\n-##########   tests   ###########\r\n-rover = Rover(\"Nord\",(5,5))\r\n-print(rover._orientation, rover._position)\r\n-rover.avance\r\n-rover.tournedroite\r\n-print(rover._orientation, rover._position)\r\n+\r\n+\r\n"
                },
                {
                    "date": 1670512110980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n rover = Rover()\r\n \r\n rover.position()\r\n \r\n-rover.tourne_droite()\r\n+rover.tourne_droite\r\n \r\n rover.position()\r\n \r\n \r\n"
                },
                {
                    "date": 1670512446601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,9 @@\n         if self.axe_y > 10: self.axe_y == 0\r\n         if self.axe_y < 0:  self.axe_y == 10\r\n \r\n     def tourne_droite(self):\r\n+        \r\n         if self._cardinal == \"Sud\":     self._cardinal == \"Ouest\"\r\n         if self._cardinal == \"Ouest\":   self._cardinal == \"Nord\"\r\n         if self._cardinal == \"Nord\":    self._cardinal == \"Est\"\r\n         if self._cardinal == \"Est\":     self._cardinal == \"Sud\"\r\n@@ -87,9 +88,9 @@\n rover = Rover()\r\n \r\n rover.position()\r\n \r\n-rover.tourne_droite\r\n+rover.tourne_droite()\r\n \r\n rover.position()\r\n \r\n \r\n"
                },
                {
                    "date": 1670512462506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         if self.axe_y > 10: self.axe_y == 0\r\n         if self.axe_y < 0:  self.axe_y == 10\r\n \r\n     def recule(self):\r\n-        #avancement enfonction de la direction\r\n+        #recule enfonction de la direction\r\n         if self._cardinal == \"Sud\":     self.axe_y += 1\r\n         if self._cardinal == \"Nord\":    self.axe_y += -1\r\n         if self._cardinal == \"Est\":     self.axe_x += -1\r\n         if self._cardinal == \"Ouest\":   self.axe_x += 1\r\n@@ -62,9 +62,9 @@\n         if self.axe_y > 10: self.axe_y == 0\r\n         if self.axe_y < 0:  self.axe_y == 10\r\n \r\n     def tourne_droite(self):\r\n-        \r\n+        #\r\n         if self._cardinal == \"Sud\":     self._cardinal == \"Ouest\"\r\n         if self._cardinal == \"Ouest\":   self._cardinal == \"Nord\"\r\n         if self._cardinal == \"Nord\":    self._cardinal == \"Est\"\r\n         if self._cardinal == \"Est\":     self._cardinal == \"Sud\"\r\n"
                },
                {
                    "date": 1670512471687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n         if self.axe_y > 10: self.axe_y == 0\r\n         if self.axe_y < 0:  self.axe_y == 10\r\n \r\n     def tourne_droite(self):\r\n-        #\r\n+        #change de dire\r\n         if self._cardinal == \"Sud\":     self._cardinal == \"Ouest\"\r\n         if self._cardinal == \"Ouest\":   self._cardinal == \"Nord\"\r\n         if self._cardinal == \"Nord\":    self._cardinal == \"Est\"\r\n         if self._cardinal == \"Est\":     self._cardinal == \"Sud\"\r\n"
                },
                {
                    "date": 1670512480050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n         if self.axe_y > 10: self.axe_y == 0\r\n         if self.axe_y < 0:  self.axe_y == 10\r\n \r\n     def tourne_droite(self):\r\n-        #change de dire\r\n+        #change de direction vers la droite\r\n         if self._cardinal == \"Sud\":     self._cardinal == \"Ouest\"\r\n         if self._cardinal == \"Ouest\":   self._cardinal == \"Nord\"\r\n         if self._cardinal == \"Nord\":    self._cardinal == \"Est\"\r\n         if self._cardinal == \"Est\":     self._cardinal == \"Sud\"\r\n"
                },
                {
                    "date": 1670512486097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n         if self._cardinal == \"Nord\":    self._cardinal == \"Est\"\r\n         if self._cardinal == \"Est\":     self._cardinal == \"Sud\"\r\n \r\n     def tourne_gauche(self):\r\n+        #change de direction vers la droite\r\n         if self._cardinal == \"Sud\":     self._cardinal == \"Est\"\r\n         if self._cardinal == \"Est\":     self._cardinal == \"Nord\"\r\n         if self._cardinal == \"Nord\":    self._cardinal == \"Ouest\"\r\n         if self._cardinal == \"Ouest\":   self._cardinal == \"Sud\"\r\n"
                }
            ],
            "date": 1670486562130,
            "name": "Commit-0",
            "content": "class Cardinal():\r\n\r\n    Sud = \"Sud\"\r\n    Ouest = \"Ouest\"\r\n    Est = \"Est\"\r\n    Nord = \"Nord\"\r\n\r\n    def __init__(self, value):\r\n        self._value = value\r\n\r\n    def __eq__(self, otherCardinal):\r\n        return self._value == otherCardinal._value\r\n\r\nclass Orientation():\r\n\r\n    def __init__(self, cardinal:Cardinal):\r\n        self._cardinal = cardinal\r\n\r\n    #besoin d'explication pour cette methode\r\n    def __eq__(self, otherOrientation):\r\n        return self._cardinal == otherOrientation._cardinal\r\n\r\n    def tourne_droite(self):\r\n        if self._cardinal == Cardinal(\"Sud\"): return Cardinal(\"Ouest\")\r\n        if self._cardinal == Cardinal(\"Ouest\"): return Cardinal(\"Nord\")\r\n        if self._cardinal == Cardinal(\"Nord\"): return Cardinal(\"Est\")\r\n        if self._cardinal == Cardinal(\"Est\"): return Cardinal(\"Sud\")\r\n\r\n    def tourne_gauche(self):\r\n        if self._cardinal == Cardinal(\"Sud\"): return Cardinal(\"Est\")\r\n        if self._cardinal == Cardinal(\"Est\"): return Cardinal(\"Nord\")\r\n        if self._cardinal == Cardinal(\"Nord\"): return Cardinal(\"Ouest\")\r\n        if self._cardinal == Cardinal(\"Ouest\"): return Cardinal(\"Sud\")\r\n\r\nclass Position():\r\n    \r\n    def __init__(self, y, x):\r\n        self.axe_y = y\r\n        self.axe_x = x\r\n        self._position = self.axe_y, self.axe_x\r\n        \r\n    def __eq__(self, otherPosition):\r\n        return self._position == otherPosition._position\r\n    \r\n    def avance(self):\r\n        if self._cardinal == Cardinal(\"Sud\"): return self.axe_y == self.axe_y - 1\r\n        if self._cardinal == Cardinal(\"Nord\"): return self.axe_y == self.axe_y + 1\r\n        if self._cardinal == Cardinal(\"Est\"): return self.axe_x == self.axe_x + 1\r\n        if self._cardinal == Cardinal(\"Ouest\"): return self.axe_x == self.axe_x - 1\r\n        if self.axe_x > 10: return self.axe_x == 10\r\n        if self.axe_x < 0: return self.axe_x == 0\r\n        if self.axe_y > 10: return self.axe_y == 0\r\n        if self.axe_y < 0: return self.axe_y == 10\r\n        self._position == self.axe_x, self.axe_y\r\n\r\n\r\nclass Rover():\r\n\r\n    def __init__(self, orientation: Orientation, position: Position):\r\n        self._orientation = orientation\r\n        self._position = position\r\n        \r\n    def getOrientation(self):\r\n        return self._orientation\r\n\r\n    def getPosition(self):\r\n        return self._position\r\n\r\n    def tournedroite(self):\r\n        self._orientation.tourne_droite()\r\n\r\n    def avance(self):\r\n        self._position.avance()\r\n\r\n\r\n##########   tests   ###########\r\nrover = Rover(\"Nord\",(5,5))\r\nprint(rover._orientation, rover._position)\r\nrover.avance\r\nrover.tournedroite\r\nprint(rover._orientation, rover._position)\r\n"
        }
    ]
}